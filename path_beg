global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
	tune.ssl.default-dh-param 2048

defaults
	log	global
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	timeout tunnel	1200000

# Use HTTP primarily as a redirector to HTTPS help browsers that don't 
# first try HTTPS connections. Also required for initial certificate
# installation
frontend http-in
	mode http
	option httplog
	bind *:80
	use_backend letsencrypt if { path_beg /.well-known/acme-challenge/ }
	default_backend https_redir

backend letsencrypt
	mode http
	# requires certbot to be run with port 8888
	server letsencrypt-certbot 127.0.0.1:8888

backend https_redir
	mode http
	# Tell a client to permanently move all requests to https
	redirect scheme https code 301

# Acts as both TLS termination/acceleration and a multi-protocol proxy
frontend tls-in
	bind *:443 ssl crt /etc/ssl/c360.sisu.io/c360.sisu.io.pem
	# we need to play some games here...first set an inspection delay and then
	# try an inspection to see we have content. this is a trick to make the 
	# client "speak" first and helps ensure we have enough data for protocol
	# detection (i.e. check if it's HTTP traffic and has HTTP headers)
	tcp-request inspect-delay 20s
	acl content_present req_len gt 0
	tcp-request content accept if content_present
	# peek to see if it's resembling HTTP...if not, probably plain bolt w/o wss
	use_backend neo4j-bolt if !HTTP
	# peek at any potential http headers seeing we have a websocket upgrade
	use_backend neo4j-bolt if { hdr(upgrade) -i -m str "websocket" } 
	# make sure we can handle certificate renewals
	use_backend letsencrypt if { path_beg /.well-known/acme-challenge/ }
	# finally, just proxy all other traffic to the neo4j http port
	default_backend neo4j-http

backend neo4j-http
	mode http
	option forwardfor
	# default neo4j browser interface :7474
	server neo4j-browser 127.0.0.1:7474 maxconn 128

backend neo4j-bolt
	# default bolt interface :7687, need to look into tuning 
	server neo4j-bolt 127.0.0.1:7687 maxconn 128

